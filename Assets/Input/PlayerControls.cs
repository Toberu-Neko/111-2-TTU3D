//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PhoneControl"",
            ""id"": ""84258c07-f2ee-4f6f-bdd2-6876d1e0586a"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""47b4a23c-317d-4b97-a0c1-dda02ea5e01f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41c00537-66c7-46d9-86e3-031f4de3836b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fbe7ce49-3306-4f76-8c02-662002f68419"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""PassThrough"",
                    ""id"": ""25001aca-7395-451b-aa78-8b59da4d8cf0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""787db16f-9a35-4b29-adfe-642bfaee4e07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""adc2be3d-5f1c-4a91-b08e-810436224327"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3c14237-1e77-4486-b6ae-d8e69edf0297"",
                    ""path"": ""<Touchscreen>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""484cdea2-6de8-4ead-9322-822fe7a1155b"",
                    ""path"": ""<Touchscreen>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd1f496a-9082-43f4-9efd-817c1d92cb3e"",
                    ""path"": ""<Touchscreen>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""339a9e28-1791-4343-a944-a6aacee18273"",
                    ""path"": ""<Accelerometer>/acceleration/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PhoneControl
        m_PhoneControl = asset.FindActionMap("PhoneControl", throwIfNotFound: true);
        m_PhoneControl_Jump = m_PhoneControl.FindAction("Jump", throwIfNotFound: true);
        m_PhoneControl_TurnLeft = m_PhoneControl.FindAction("TurnLeft", throwIfNotFound: true);
        m_PhoneControl_TurnRight = m_PhoneControl.FindAction("TurnRight", throwIfNotFound: true);
        m_PhoneControl_Slide = m_PhoneControl.FindAction("Slide", throwIfNotFound: true);
        m_PhoneControl_Move = m_PhoneControl.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PhoneControl
    private readonly InputActionMap m_PhoneControl;
    private IPhoneControlActions m_PhoneControlActionsCallbackInterface;
    private readonly InputAction m_PhoneControl_Jump;
    private readonly InputAction m_PhoneControl_TurnLeft;
    private readonly InputAction m_PhoneControl_TurnRight;
    private readonly InputAction m_PhoneControl_Slide;
    private readonly InputAction m_PhoneControl_Move;
    public struct PhoneControlActions
    {
        private @PlayerControls m_Wrapper;
        public PhoneControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PhoneControl_Jump;
        public InputAction @TurnLeft => m_Wrapper.m_PhoneControl_TurnLeft;
        public InputAction @TurnRight => m_Wrapper.m_PhoneControl_TurnRight;
        public InputAction @Slide => m_Wrapper.m_PhoneControl_Slide;
        public InputAction @Move => m_Wrapper.m_PhoneControl_Move;
        public InputActionMap Get() { return m_Wrapper.m_PhoneControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhoneControlActions set) { return set.Get(); }
        public void SetCallbacks(IPhoneControlActions instance)
        {
            if (m_Wrapper.m_PhoneControlActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnJump;
                @TurnLeft.started -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnTurnLeft;
                @TurnLeft.performed -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnTurnLeft;
                @TurnLeft.canceled -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnTurnLeft;
                @TurnRight.started -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnTurnRight;
                @TurnRight.performed -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnTurnRight;
                @TurnRight.canceled -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnTurnRight;
                @Slide.started -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnSlide;
                @Slide.performed -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnSlide;
                @Slide.canceled -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnSlide;
                @Move.started -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PhoneControlActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PhoneControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @TurnLeft.started += instance.OnTurnLeft;
                @TurnLeft.performed += instance.OnTurnLeft;
                @TurnLeft.canceled += instance.OnTurnLeft;
                @TurnRight.started += instance.OnTurnRight;
                @TurnRight.performed += instance.OnTurnRight;
                @TurnRight.canceled += instance.OnTurnRight;
                @Slide.started += instance.OnSlide;
                @Slide.performed += instance.OnSlide;
                @Slide.canceled += instance.OnSlide;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public PhoneControlActions @PhoneControl => new PhoneControlActions(this);
    public interface IPhoneControlActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
